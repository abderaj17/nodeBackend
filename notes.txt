ROUTING IN EXPRESS JS

Node js environment

npm init -y -- initializes empty project

index.js -- main file

api design with EXPRESS

port listerner for localhost

router are the path for browser --> root route, named
   dynamic routing (welcome page)

Query parameter ability to select and define the search


day2 ->
Middleware
MVC architecture
API -> Restful API (scalable, reliable, secure, fast)


app.method("/sum", (req, res)=>{
     const a = parseInt(req.query.a);
     const b = parseInt(req.query.b);

     res.send("")
})


1. app.use(Middleware)
2. const Middleware = (req, res, next()=>{})

app.method("/route", Middleware, callback handler);


*Middleware are the functions that are implemented before any route is handled after recieving the
  request.



--->>DataBases<<---

MONGODB-->> clear

mongose cell -> show dbs -> to list the available db in your system.
                use dbs  -> create


create commands -> db.collectionName.insertOne({obj that needs to be stored})
                   db.collectionName.insertMany(
                    [
                        {},
                        {},
                        {}
                    ]
                   )

Read commands->
db.trial.find({name:"BCD"})
db.trial.findOne({name:"BCD"});


ex -- db.trial.find({age: {$lt: 100}})

*NO condition means all the data.

COMPARISON OPERATORS-->>

-db.trial.find({age: {$lt: 100}}) 
-$lte -> less than or equal to
-$gt -> greater than
-$gte -> greater than equal
-$ne -> not equal

db.trial.find({age: {$ne: 50}})

&&-> 
db.trial.find({$and: [{condition1}, {condition2}]});



ecommerce app ->
roll based authentication ->
                            

We will be using Mongoose for data handeling.

CAPTCHA => Completely automated public turing test to tell computers and humans apart.

Aggregation and pipelines -->>

When we have to implement more than one logic to the data
 in order to extract something that depends on the data but is not exactly in the same 
 as the data.


Grouping and count and return.


10000 -> international users
-> sales team -> countries

-> users in my service are from different countries

-> find active users -> isActive: true
-> groud the users based on countries and write their count
-> sort based on count in descending order
-> country , userCount

app.get("/country", async (req, res)=>{
  try{

  }catch(err){
    
  }
})

[
  {
    country: india,

  }
]